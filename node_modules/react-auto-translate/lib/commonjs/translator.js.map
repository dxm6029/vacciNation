{"version":3,"sources":["translator.tsx"],"names":["defaultHandler","TranslateContext","LanguageContext","Translator","to","from","cacheProvider","children","googleApiKey","getCachedTranslation","value","undefined","get","setCachedTranslation","translation","set","getGoogleTranslation","fetch","response","json","jsonResponse","data","translations","translatedText","handleTranslationAsync","setTranslation","cachedTranslation"],"mappings":"mYAAA,qD,wFAMA,GAAMA,CAAAA,cAAkC,CAAG,QAArCA,CAAAA,cAAqC,EAAM,CAAE,CAAnD,CAEO,GAAMC,CAAAA,gBAEZ,CAAG,yBAAcD,cAAd,CAFG,C,0CAGA,GAAME,CAAAA,eAAsC,CAAG,yBAAc,IAAd,CAA/C,C,wCAeQ,QAASC,CAAAA,UAAT,MAMQ,IALrBC,CAAAA,EAKqB,MALrBA,EAKqB,CAJrBC,IAIqB,MAJrBA,IAIqB,CAHrBC,aAGqB,MAHrBA,aAGqB,CAFrBC,QAEqB,MAFrBA,QAEqB,CADrBC,YACqB,MADrBA,YACqB,CACrB,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAuC,CAClE,GAAI,CAACJ,aAAL,CAAoB,CAClB,MAAOK,CAAAA,SAAP,CACD,CAED,MAAOL,CAAAA,aAAa,CAACM,GAAd,CAAkBR,EAAlB,CAAsBM,KAAtB,CAAP,CACD,CAND,CAQA,GAAMG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACH,KAAD,CAAgBI,WAAhB,CAA8C,CACzE,GAAI,CAACR,aAAL,CAAoB,CAClB,OACD,CAEDA,aAAa,CAACS,GAAd,CAAkBX,EAAlB,CAAsBM,KAAtB,CAA6BI,WAA7B,EACD,CAND,CAQA,GAAME,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAC3BN,KAD2B,6NAIFO,KAAK,oEACyCZ,IADzC,YACwDD,EADxD,SACkEI,YADlE,OACoFE,KADpF,gBAJH,SAInBQ,QAJmB,iEAQEA,QAAQ,CAACC,IAAT,EARF,SAQnBC,YARmB,+CAUlBA,YAAY,CAACC,IAAb,CAAkBC,YAAlB,CAA+B,CAA/B,EAAkCC,cAVhB,4FAYlBZ,SAZkB,oEAA7B,CAgBA,GAAMa,CAAAA,sBAA0C,CAAG,QAA7CA,CAAAA,sBAA6C,CACjDd,KADiD,CAEjDe,cAFiD,gLAK7CrB,EAAE,GAAKC,IALsC,2BAM/CoB,cAAc,CAACf,KAAD,CAAd,CAN+C,yCAW3CgB,iBAX2C,CAWvBjB,oBAAoB,CAACC,KAAD,CAXG,KAY7CgB,iBAZ6C,0BAa/CD,cAAc,CAACC,iBAAD,CAAd,CAb+C,4FAkBpBV,oBAAoB,CAACN,KAAD,CAlBA,SAkB3Ca,cAlB2C,oBAmB7CA,cAnB6C,2BAoB/CV,oBAAoB,CAACH,KAAD,CAAQa,cAAR,CAApB,CACAE,cAAc,CAACF,cAAD,CAAd,CArB+C,0CA0BjDE,cAAc,CAACf,KAAD,CAAd,CA1BiD,gDAAnD,CA6BA,MACE,8BAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAEc,sBAAlC,iDACE,6BAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAEpB,EAAjC,iDAAsCG,QAAtC,CADF,CADF,CAKD","sourcesContent":["import React, {createContext} from 'react';\n\nexport type TranslationHandler = {\n  (value: string, setTranslation: (translation: string) => void): void;\n};\n\nconst defaultHandler: TranslationHandler = () => {};\n\nexport const TranslateContext: React.Context<\n  TranslationHandler\n> = createContext(defaultHandler);\nexport const LanguageContext: React.Context<string> = createContext('en');\n\ntype CacheProvider = {\n  get: (language: string, key: string) => string | undefined;\n  set: (language: string, key: string, translation: string) => void;\n};\n\ntype Props = {\n  to: string;\n  from: string;\n  cacheProvider?: CacheProvider;\n  children: string;\n  googleApiKey: string;\n};\n\nexport default function Translator({\n  to,\n  from,\n  cacheProvider,\n  children,\n  googleApiKey,\n}: Props): JSX.Element {\n  const getCachedTranslation = (value: string): string | undefined => {\n    if (!cacheProvider) {\n      return undefined;\n    }\n\n    return cacheProvider.get(to, value);\n  };\n\n  const setCachedTranslation = (value: string, translation: string): void => {\n    if (!cacheProvider) {\n      return;\n    }\n\n    cacheProvider.set(to, value, translation);\n  };\n\n  const getGoogleTranslation = async (\n    value: string\n  ): Promise<string | undefined> => {\n    try {\n      const response = await fetch(\n        `https://translation.googleapis.com/language/translate/v2?source=${from}&target=${to}&key=${googleApiKey}&q=${value}&format=text`\n      );\n\n      const jsonResponse = await response.json();\n\n      return jsonResponse.data.translations[0].translatedText;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  const handleTranslationAsync: TranslationHandler = async (\n    value,\n    setTranslation\n  ) => {\n    // no need to translate!\n    if (to === from) {\n      setTranslation(value);\n      return;\n    }\n\n    // attempt cached translation first\n    const cachedTranslation = getCachedTranslation(value);\n    if (cachedTranslation) {\n      setTranslation(cachedTranslation);\n      return;\n    }\n\n    // attempt google translation next\n    const translatedText = await getGoogleTranslation(value);\n    if (translatedText) {\n      setCachedTranslation(value, translatedText);\n      setTranslation(translatedText);\n      return;\n    }\n\n    // default to value\n    setTranslation(value);\n  };\n\n  return (\n    <TranslateContext.Provider value={handleTranslationAsync}>\n      <LanguageContext.Provider value={to}>{children}</LanguageContext.Provider>\n    </TranslateContext.Provider>\n  );\n}\n"]}